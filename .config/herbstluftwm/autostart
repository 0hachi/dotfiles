#!/usr/bin/env bash

hc() {
    herbstclient "$@"
}

hc emit_hook reload

hc set default_frame_layout grid
hc substitute ALGO settings.default_frame_layout \
    foreach T tags.by-name. \
    sprintf ATTR '%c.tiling.root.algorithm' T \
    set_attr ATTR ALGO

xsetroot -solid "#191919" &
~/.config/succade/run.sh &

hc keyunbind --all

# keybindings
Mod=Mod4
Alt=Mod1

# core
hc keybind $Mod-Shift-r reload
hc keybind $Mod-q close

# apps
hc keybind $Mod-Return spawn "alacritty"
hc keybind $Mod-b spawn "librewolf"
hc keybind $Mod-Shift-Return spawn "alacritty" --class "alacritty-float"

hc keybind $Mod-d spawn "dmenu_run_apps"
hc keybind $Mod-e spawn "dmenu_emoji_menu"

hc keybind Print spawn "$HOME/.local/share/bin/screenshot"

# moving focus
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right

hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u       split   bottom  0.5
hc keybind $Mod-o       split   right   0.5

hc keybind $Mod-Control-space split explode

# resizing frames and floating clients
resizestep=0.01
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep

hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep


# tags
mon1_names=( "0_www" "0_dev" "0_img" "0_misc" )
mon2_names=( "1_www" "1_dev" "1_img" "1_misc" )
tag_keys=( {1..4})


hc rename default "${mon1_names[0]}" || true
for tag in "${mon1_names[@]}" "${mon2_names[@]}" ; do
    hc try silent add "$tag"
done

for i in ${!tag_keys[@]} ; do
    key="${tag_keys[$i]}"
    # the keybinding works as follows: the or executes the commands separated by
    # CASE and stops executing them after the first of those succeeds.
    # the first command is: check that we are on monitor 3 and can switch to tag "${mon1_names[$i]}"
    # if only one of these two steps fail, try the second one (and so one).
    # The setup for two monitors is as follows:
    hc keybind "$Mod-$key" \
        or CASE and . compare monitors.focus.index = 0 . use "${mon1_names[$i]}" \
           CASE and . compare monitors.focus.index = 1 . use "${mon2_names[$i]}"
    hc keybind "$Mod-Shift-$key" \
        or CASE and . compare monitors.focus.index = 0 . move "${mon1_names[$i]}" \
           CASE and . compare monitors.focus.index = 1 . move "${mon2_names[$i]}"
done

# cycle through tags
# add additional information in order to cycle only through a monitor's tags
# and not through all tags
define-tag-cycle() {
    local n=$#
    local tags=( "$@" )
    for i in "${!tags[@]}" ; do
        local t="${tags[$i]}"
        hc chain , new_attr string tags.by-name."$t".my_previous_tag \
                 , set_attr tags.by-name."$t".my_previous_tag "${tags[$(((i - 1 + n) % n))]}" \
                 , new_attr string tags.by-name."$t".my_next_tag \
                 , set_attr tags.by-name."$t".my_next_tag "${tags[$(((i + 1) % n))]}"
    done
}

define-tag-cycle "${mon1_names[@]}"
define-tag-cycle "${mon2_names[@]}"

# cycle through tags
# check whether the current tag as a custom "next tag" configured
# if yes, jump to that one, otherwise fall back to ordinary use_index +1
hc keybind $Mod-period or , substitute NEXT tags.focus.my_next_tag use NEXT  \
                          , use_index +1 --skip-visible
hc keybind $Mod-comma  or , substitute PREV tags.focus.my_previous_tag use PREV  \
                          , use_index +1 --skip-visible

# multi monitors
hc detect_monitors

# layouting
hc keybind $Mod-r remove

hc keybind $Mod-s set_attr clients.focus.floating toggle
hc keybind $Mod-f fullscreen toggle

hc keybind $Mod-Shift-m set_attr clients.focus.minimized true
hc keybind $Mod-Control-m        jumpto last-minimized

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c           cycle
hc keybind $Mod-i           jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1

# frame
hc set always_show_frame 0


# real talk, I'm not very sure how frames work
# hence this might be very random
hc set frame_border_normal_color '#222222'
hc set frame_border_width 0

hc set frame_bg_normal_color '#202020'
hc set frame_bg_active_color '#131313'
hc set frame_bg_transparent 1

hc set frame_transparent_width 0
hc set frame_gap 12

hc set window_gap           40

hc attr theme.active.color '#202020'
hc attr theme.normal.color '#202020'
hc attr theme.urgent.color '#303030'

hc attr theme.border_width 10


# rules
hc unrule -F

hc rule focus=on # normally focus new clients
hc rule floatplacement=smart


hc set focus_follows_mouse  1
hc set focus_crosses_monitor_boundaries 1
hc set swap_monitors_to_get_tag=off

hc rule class~"(alacritty-float)" focus=on floating=on

hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc rule fixedsize floating=on
hc set tree_style '╾│ ├└╼─┐'

hc unlock

